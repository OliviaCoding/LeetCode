/*
54. Spiral Matrix
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/
class Solution {
    enum Direction {
        RIGHT, DOWN, LEFT, UP
    }

    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<>();
        if (matrix == null || matrix.length == 0) {
            return ans;
        }

        int rows = matrix.length;
        int cols = matrix[0].length;
        int x = 0, y = 0;
        boolean[][] visited = new boolean[rows][cols];

        Direction direction = Direction.RIGHT;
        int totalElements = rows * cols;

        while (ans.size() < totalElements) {
            ans.add(matrix[x][y]);
            visited[x][y] = true;

            switch (direction) {
                case RIGHT:
                    if (y + 1 < cols && !visited[x][y + 1]) {
                        y++;
                    } else {
                        direction = Direction.DOWN;
                        x++;
                    }
                    break;

                case DOWN:
                    if (x + 1 < rows && !visited[x + 1][y]) {
                        x++;
                    } else {
                        direction = Direction.LEFT;
                        y--;
                    }
                    break;

                case LEFT:
                    if (y - 1 >= 0 && !visited[x][y - 1]) {
                        y--;
                    } else {
                        direction = Direction.UP;
                        x--;
                    }
                    break;

                case UP:
                    if (x - 1 >= 0 && !visited[x - 1][y]) {
                        x--;
                    } else {
                        direction = Direction.RIGHT;
                        y++;
                    }
                    break;

            }
        }
        return ans;
    }
}
